<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>first post</title>
    <link href="/2020/10/12/first-post/"/>
    <url>/2020/10/12/first-post/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/12/hello-world/"/>
    <url>/2020/10/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LMForm - iOS表单配置框架</title>
    <link href="/2020/10/12/LMForm%20-%20iOS%E8%A1%A8%E5%8D%95%E9%85%8D%E7%BD%AE%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/10/12/LMForm%20-%20iOS%E8%A1%A8%E5%8D%95%E9%85%8D%E7%BD%AE%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通常，将一个页面需要编辑/录入多项信息的页面称为<strong>表单</strong>。iOS 实现表单大多数基于TableView,麻烦的是需要在<code>UITableViewDataSource</code>或者<code>UITableViewDelegate</code>的代理方法中写很多<code>if-else</code>，与cell耦合严重,不易获取用户已编辑的数据。如果表单页面的配置数据从服务端返回，不易实现。</p><a id="more"></a><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>LMForm 是基于MVVM轻量级表单配置框架，把数据和事件整合为一个model，实现cell与model的绑定，只需操作model便可配置表单。项目地址：<a href="https://github.com/MaricleZhang/LMForm.git">https://github.com/MaricleZhang/LMForm.git</a></p><h2 id="2-功能"><a href="#2-功能" class="headerlink" title="2. 功能"></a>2. 功能</h2><ol><li>支持动态配置model来实现表单。</li><li>支持配置文本、输入框、选择器、日期选择、地址选择等。</li><li>支持快速提取数据。</li><li>支持数据校验，可自定义校验格式。</li><li>支持完全自定义cell类型。</li></ol><h2 id="3-预览"><a href="#3-预览" class="headerlink" title="3. 预览"></a>3. 预览</h2><p><img src="https://upload-images.jianshu.io/upload_images/2403444-17f9aee95b2e1792.gif?imageMogr2/auto-orient/strip" alt="form.gif"></p><h2 id="4-安装"><a href="#4-安装" class="headerlink" title="4. 安装"></a>4. 安装</h2><h3 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h3><p>在 Podfile 中进行如下导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#39;LMForm&#39;</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><h2 id="5-使用"><a href="#5-使用" class="headerlink" title="5. 使用"></a>5. 使用</h2><p>在项目中导入<code>#import &quot;LMForm.h&quot; </code></p><h3 id="1-配置数据源"><a href="#1-配置数据源" class="headerlink" title="1. 配置数据源"></a>1. 配置数据源</h3><p>目前项目中集成以下类型：</p><table><thead><tr><th>类型</th><th>宏定义</th><th>Cell Class</th></tr></thead><tbody><tr><td>文本</td><td>kFormTypeText</td><td>LMFormCell</td></tr><tr><td>输入框</td><td>kFormTypeInput</td><td>LMFormInputCell</td></tr><tr><td>选择器</td><td>kFormTypeSelector</td><td>LMFormSelectorCell</td></tr><tr><td>日期选择器</td><td>kFormTypeDate</td><td>LMDateCell</td></tr><tr><td>地址输入框</td><td>kFormTypeAddressInput</td><td>LMFormAddressInputCell</td></tr></tbody></table><p>可根据需求来选择对应的类型，例如输入框的model配置代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F; 输入框</span><br><span class="line">- (LMFormModel *)loadInput</span><br><span class="line">&#123;</span><br><span class="line">    LMFormModel *model &#x3D; [LMFormModel new];</span><br><span class="line">    model.formType &#x3D; kFormTypeInput;</span><br><span class="line">    model.title &#x3D; @&quot;手机号&quot;;</span><br><span class="line">    model.key &#x3D; @&quot;mobile&quot;;</span><br><span class="line">    model.value &#x3D; @&quot;&quot;;</span><br><span class="line">    model.placeholder &#x3D; @&quot;请输入手机号&quot;;</span><br><span class="line">    model.height &#x3D; LM_XX_6(50);</span><br><span class="line">    model.message &#x3D; @&quot;请输入正确的手机号&quot;;</span><br><span class="line">    model.limitLength &#x3D; 11;</span><br><span class="line">    model.validateBlock &#x3D; ^BOOL(LMFormModel * _Nullable model) &#123;</span><br><span class="line">        if (![LMFormValidator isMobile:model.value])</span><br><span class="line">        &#123;</span><br><span class="line">            [LMWindowHud showHud:model.message];</span><br><span class="line">            return NO;</span><br><span class="line">        &#125;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;;</span><br><span class="line">    return model;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可根据需要设置UI，输入限制长度，自定义校验等。</p><h3 id="2-创建tableview"><a href="#2-创建tableview" class="headerlink" title="2. 创建tableview"></a>2. 创建tableview</h3><p>创建基于LMFormTableView 的tableview，并且赋值渲染数据，表单的创建完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.tableView.dataArray &#x3D; self.dataArray;</span><br></pre></td></tr></table></figure><h3 id="3-校验数据"><a href="#3-校验数据" class="headerlink" title="3. 校验数据"></a>3. 校验数据</h3><p>提交时，对数据源进行自定义校验，校验的逻辑是对<code>model.validateBlock</code>遍历回调。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> 对数据源校验</span><br><span class="line"></span><br><span class="line"> @param dataArray 数据源</span><br><span class="line"> @return 全部校验通过返回YES，否则返回NO。</span><br><span class="line"> *&#x2F;</span><br><span class="line">+ (BOOL)validateDataArray:(NSArray&lt;LMFormModel *&gt; *)dataArray</span><br><span class="line">&#123;</span><br><span class="line">    for (LMFormModel * _Nonnull obj in dataArray)</span><br><span class="line">    &#123;</span><br><span class="line">        if (obj.validateBlock)</span><br><span class="line">        &#123;</span><br><span class="line">            if (!obj.validateBlock(obj)) return NO;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-获取数据源"><a href="#4-获取数据源" class="headerlink" title="4. 获取数据源"></a>4. 获取数据源</h3><p>因为LMFormTableView中的cell与model绑定，只需遍历获取<code>value</code>即可。</p><h2 id="6-Cell-类型的介绍"><a href="#6-Cell-类型的介绍" class="headerlink" title="6. Cell 类型的介绍"></a>6. Cell 类型的介绍</h2><h3 id="1-LMFormCell"><a href="#1-LMFormCell" class="headerlink" title="1. LMFormCell"></a>1. LMFormCell</h3><p>基类cell:其他类型cell继承该cell，主要功能显示文本，不可编辑。可根据需求配置相应UI和数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (void)configModel:(LMFormModel *)model</span><br><span class="line">&#123;</span><br><span class="line">    self.model &#x3D; model;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; data</span><br><span class="line">    self.titleLabel.text &#x3D; model.title;</span><br><span class="line">    self.textField.placeholder &#x3D; model.placeholder;</span><br><span class="line">    self.textField.text &#x3D; model.value;</span><br><span class="line">    if (model.limitLength)</span><br><span class="line">    &#123;</span><br><span class="line">        self.textField.limitLength &#x3D; @(model.limitLength);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; UI</span><br><span class="line">    self.line.hidden &#x3D; model.hiddenLine;</span><br><span class="line">    self.line.backgroundColor &#x3D; LM_ObjDefault(model.separatorLineColor, LM_UIColorFromHEX(0xF4F4F4));</span><br><span class="line">    self.titleLabel.textColor &#x3D; LM_ObjDefault(model.leftTextColor, LM_UIColorFromHEX(0x666666));</span><br><span class="line">    self.textField.textColor &#x3D; LM_ObjDefault(model.rightTextColor, LM_UIColorFromHEX(0x333333));</span><br><span class="line">    self.titleLabel.font &#x3D; LM_ObjDefault(model.leftLabelFont, [UIFont systemFontOfSize:LM_XX_6(14)]);</span><br><span class="line">    self.titleLabel.font &#x3D; LM_ObjDefault(model.rightLabelFont, [UIFont systemFontOfSize:LM_XX_6(14)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-LMFormInputCell"><a href="#2-LMFormInputCell" class="headerlink" title="2. LMFormInputCell"></a>2. LMFormInputCell</h3><p>输入Cell:可以编辑，可以对输入长度限制，输入的text更新为model的value。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (void)textDidChanged:(UITextField *)textField</span><br><span class="line">&#123;</span><br><span class="line">    self.model.value &#x3D; textField.text;</span><br><span class="line">    if (self.model.valueDidChangedBlock)</span><br><span class="line">    &#123;</span><br><span class="line">        self.model.valueDidChangedBlock(textField.text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-LMFormSelectorCell"><a href="#3-LMFormSelectorCell" class="headerlink" title="3. LMFormSelectorCell"></a>3. LMFormSelectorCell</h3><p>选择器Cell:可以选择对应的item,需要配置数据<code>NSArray&lt;NSString *&gt; *selectList</code>,点击cell底部弹窗pickerView</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (void)tapSelectedAction</span><br><span class="line">&#123;</span><br><span class="line">    LMDefaultPickerView *pickView &#x3D; [[LMDefaultPickerView alloc] initWithDataArray:self.model.selectList];</span><br><span class="line">    @weakify(self)</span><br><span class="line">    [LMPopupView showPopupViewWithPickView:pickView title:self.model.placeholder confirmBlock:^&#123;</span><br><span class="line">        @strongify(self)</span><br><span class="line">        NSString *text &#x3D; self.model.selectList[pickView.selectIndex];</span><br><span class="line">        self.model.value &#x3D; text;</span><br><span class="line">        self.textField.text &#x3D; text;</span><br><span class="line">        if (self.model.valueDidChangedBlock)</span><br><span class="line">        &#123;</span><br><span class="line">            self.model.valueDidChangedBlock(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; cancelBlock:^&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-LMDateCell"><a href="#4-LMDateCell" class="headerlink" title="4. LMDateCell"></a>4. LMDateCell</h3><p>选择日期Cell：与选择cell类似，底部弹窗datePickerView。目前只支持年月日。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- (void)tapSelectedAction</span><br><span class="line">&#123;</span><br><span class="line">    @weakify(self)</span><br><span class="line">    [LMPopupView showPopupViewWithPickView:self.datePicker title:self.model.placeholder confirmBlock:^&#123;</span><br><span class="line">        @strongify(self)</span><br><span class="line">        NSDate *date &#x3D; self.datePicker.date;</span><br><span class="line">        NSDateFormatter *formatter &#x3D; [[NSDateFormatter alloc] init];</span><br><span class="line">        [formatter setDateFormat:self.model.dateFormat ?: @&quot;yyyy-MM-dd&quot;];</span><br><span class="line">        NSString *text &#x3D; [formatter stringFromDate:date];</span><br><span class="line">        self.model.value &#x3D; text;</span><br><span class="line">        self.textField.text &#x3D; text;</span><br><span class="line">    &#125; cancelBlock:^&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-LMFormAddressInputCell"><a href="#5-LMFormAddressInputCell" class="headerlink" title="5. LMFormAddressInputCell"></a>5. LMFormAddressInputCell</h3><p>地址输入cell：主要用来输入较多数字的信息，分两行显示。</p><h3 id="6-自定义cell"><a href="#6-自定义cell" class="headerlink" title="6.自定义cell"></a>6.自定义cell</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>LMForm 支持cell的完全自定义，创建的自定义cell需要遵循协议<code>LMFormCellProtocol</code>，<br>协议的方法必须实现，在自定义的cell中实现配置数据。如果LMFormModel中的属性不能满足需求，可以创建LMFormModel分类添加或者继承。个人比较推荐分类的做法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** 根据model 配置对应的cell  *&#x2F;</span><br><span class="line">- (void)configModel:(LMFormModel *)model;</span><br></pre></td></tr></table></figure><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><p>LMForm 维护一张注册表建立key与cellClass的一一对应关系，单例<code>LMFormTypeManager</code>中的<code>keyCellTypes</code>就是这个注册表。注册方法为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> 自定义cell时注册方法，同一种cell只需要注册一次。cls 需继承UITableViewCell</span><br><span class="line"></span><br><span class="line"> @param cls cell class</span><br><span class="line"> @param key key</span><br><span class="line"> *&#x2F;</span><br><span class="line">- (void)registerCellClass:(Class)cls forKey:(NSString *)key;</span><br></pre></td></tr></table></figure><p>需要注意的是注册表是个字典，<strong>key的定义不能重复</strong>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>客户端配置方法</title>
    <link href="/2019/06/28/%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"/>
    <url>/2019/06/28/%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h2><p><a href="https://mariclezhang.github.io/2019/06/27/Windows%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/">https://mariclezhang.github.io/2019/06/27/Windows%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</a></p><a id="more"></a><h2 id="Mac-客户端"><a href="#Mac-客户端" class="headerlink" title="Mac 客户端"></a>Mac 客户端</h2><p><a href="https://mariclezhang.github.io/2019/06/27/Mac%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/">https://mariclezhang.github.io/2019/06/27/Mac%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</a></p><h2 id="Andriod-客户端"><a href="#Andriod-客户端" class="headerlink" title="Andriod 客户端"></a>Andriod 客户端</h2><p><a href="https://mariclezhang.github.io/2019/06/27/Android%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/">https://mariclezhang.github.io/2019/06/27/Android%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</a></p><h2 id="iOS-客户端"><a href="#iOS-客户端" class="headerlink" title="iOS 客户端"></a>iOS 客户端</h2><p><a href="https://mariclezhang.github.io/2019/06/27/iOS%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/">https://mariclezhang.github.io/2019/06/27/iOS%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mac 客户端配置</title>
    <link href="/2019/06/27/Mac%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/06/27/Mac%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="下载Mac客户端ShadowsocksR"><a href="#下载Mac客户端ShadowsocksR" class="headerlink" title="下载Mac客户端ShadowsocksR"></a>下载Mac客户端ShadowsocksR</h3><p>下载地址：<a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/download/1.4.4-r8/ShadowsocksX-NG-R8.dmg">https://github.com/qinyuhang/ShadowsocksX-NG-R/releases/download/1.4.4-r8/ShadowsocksX-NG-R8.dmg</a></p><a id="more"></a><h3 id="ShadowsocksR-Mac客户端安装及运行"><a href="#ShadowsocksR-Mac客户端安装及运行" class="headerlink" title="ShadowsocksR Mac客户端安装及运行"></a>ShadowsocksR Mac客户端安装及运行</h3><ol><li>下载完成后，打开dmg文件，双击shadowsocksX-NG-R8。</li></ol><p><img src="https://raw.githubusercontent.com/MaricleZhang/reasource/master/2403444-408751fde9a2011f.png" alt="安装ssr.png"><br>2. 安装完成后，从LaunchPad或应用程序中打开，系统右上角会出现小飞机标志。</p><ol start="3"><li>点击小飞机打开菜单–&gt;服务器–&gt;服务器设置：</li></ol><p><img src="https://raw.githubusercontent.com/MaricleZhang/reasource/master/2403444-3760f31aece7fb86.jpg" alt="添加服务器.jpg"></p><ol start="4"><li>在接下来的窗口中，点击左下侧的 + 号，然后在右侧设置服务器参数，按<strong>所给的账号配置信息</strong>。<br><img src="https://raw.githubusercontent.com/MaricleZhang/reasource/master/2403444-af4c96268cd4dbad.png" alt="配置信息.png"></li><li>打开<a href="http://www.google.com,能打开说明配置成功,可以愉快的翻墙了./">www.google.com，能打开说明配置成功，可以愉快的翻墙了。</a></li></ol><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ol><li>代理模式最好设置为PAC自动模式，访问国内网站不走代理。<br>操作步骤：右击小飞机图标-&gt;系统代理模式-&gt;PAC模式。</li><li>本代理可以速度很快，可以看720p <a href="https://www.youtube.com/">youtube</a>视频,可以尝试一下。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows 客户端配置</title>
    <link href="/2019/06/27/Windows%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/06/27/Windows%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="下载Windows客户端ShadowsocksR"><a href="#下载Windows客户端ShadowsocksR" class="headerlink" title="下载Windows客户端ShadowsocksR"></a>下载Windows客户端ShadowsocksR</h3><p>下载地址：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip</a></p><a id="more"></a><h3 id="ShadowsocksR-Windows客户端安装及运行"><a href="#ShadowsocksR-Windows客户端安装及运行" class="headerlink" title="ShadowsocksR Windows客户端安装及运行"></a>ShadowsocksR Windows客户端安装及运行</h3><ol><li><p>SSR下载完成后，解压，然后后运行ShadowsocksR-dotnet2.0.exe 或 ShadowsocksR-dotnet4.0.exe 即可。</p></li><li><p>SSR成功运行后，系统任务栏会出现一个小飞机标志：</p></li></ol><p><img src="https://raw.githubusercontent.com/MaricleZhang/reasource/master/2018-07-17_163552.jpg" alt="小飞机标志.jpg"></p><ol start="3"><li><p>我们需要先添加SSR服务器。右键点击小飞机——服务器——编辑服务器：<br><img src="https://raw.githubusercontent.com/MaricleZhang/reasource/master/2018-07-17_163952.jpg" alt="添加SSR服务器.jpg"></p></li><li><p>在弹出的编辑服务器窗口，直接修改默认的几项参数。修改为之前安装SSR服务端时，设置好的各项信息。其中带 * 号的几项，为必填项。设置完成后，点击确定即可完成服务器的设置。</p></li></ol><p><img src="https://raw.githubusercontent.com/MaricleZhang/reasource/master/WechatIMG35.jpeg" alt="编辑服务器.jpeg"></p><ol start="5"><li>打开<a href="www.google.com">www.google.com</a>，能打开说明配置成功，可以愉快的翻墙了。</li></ol><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ol><li>代理模式最好设置为PAC自动模式，访问国内网站不走代理。<br>操作步骤：右击小飞机图标-&gt;系统代理模式-&gt;PAC模式。</li><li>本代理可以速度很快，可以看720p <a href="https://www.youtube.com/">youtube</a>视频,可以尝试一下。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Andriod 客户端配置</title>
    <link href="/2019/06/27/Android%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/06/27/Android%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="下载Andriod客户端"><a href="#下载Andriod客户端" class="headerlink" title="下载Andriod客户端"></a>下载Andriod客户端</h3><p><a href="https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.4/shadowsocksr-android-3.5.4.apk">https://github.com/shadowsocksrr/shadowsocksr-android/releases/download/3.5.4/shadowsocksr-android-3.5.4.apk</a></p><a id="more"></a><h3 id="配置SSR"><a href="#配置SSR" class="headerlink" title="配置SSR"></a>配置SSR</h3><ol><li>打开SSR(粉红色图标），出现下图：</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2403444-c2f6e2af93a91ed1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SSR"></p><ol start="2"><li><p>按所给信息配置：服务器、远端端口、密码、加密方法、协议、混淆方法。<strong>其他的不要动</strong>。</p></li><li><p>配置完成后点击右上角小飞机图标。</p></li><li><p>到浏览器中打开</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS 客户端配置</title>
    <link href="/2019/06/27/iOS%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <url>/2019/06/27/iOS%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="下载iOS客户端"><a href="#下载iOS客户端" class="headerlink" title="下载iOS客户端"></a>下载iOS客户端</h3><p>iOS 客户端在appstore 中国大陆地区被封了，所以需要把地区改为“台湾”。<br>步骤：设置–&gt;通用–&gt;语言与地区–&gt;地区–选择台湾。地区设置完成后在apptore中搜索”Potatso Lite”下载即可。</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/2403444-b37ef320145c88d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Potatso Lite.png"></p><h3 id="配置Potatso-Lite"><a href="#配置Potatso-Lite" class="headerlink" title="配置Potatso Lite"></a>配置Potatso Lite</h3><h4 id="方法一：二维码扫描"><a href="#方法一：二维码扫描" class="headerlink" title="方法一：二维码扫描"></a>方法一：二维码扫描</h4><ol><li>打开Potatso Lite，点击添加代理。</li><li>点击二维码扫描。</li><li>点击“开始”。</li><li>浏览器中输入<a href="http://www.google.com,打开则说明连接成功./">www.google.com,打开则说明连接成功。</a></li></ol><p><img src="https://upload-images.jianshu.io/upload_images/2403444-94cc6320a34573bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10_54_06__07_02_2019.jpg"></p><h4 id="方法二：手动输入"><a href="#方法二：手动输入" class="headerlink" title="方法二：手动输入"></a>方法二：手动输入</h4><ol><li>打开Potatso Lite，点击添加代理。</li><li>选择“手动输入”。</li><li>点击Shadowsocks，下面会弹出选择框，选择ShadowsocksR。</li><li>按照<strong>所给的配置信息</strong>填写，如下。<br><img src="https://upload-images.jianshu.io/upload_images/2403444-32308b7e6492f3ab.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10_53_17__07_02_2019.jpg"></li><li>点击右上角的“对号”，返回到首页如下，点击开始<br><img src="https://upload-images.jianshu.io/upload_images/2403444-94cc6320a34573bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="10_54_06__07_02_2019.jpg"></li><li>浏览器中输入<a href="http://www.google.com,打开则说明连接成功./">www.google.com,打开则说明连接成功。</a></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mac常用工具</title>
    <link href="/2019/03/19/Mac%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2019/03/19/Mac%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mac OS X系统有一段时间了，记录一下开发中优秀的工具。</p><a id="more"></a><h4 id="licecap"><a href="#licecap" class="headerlink" title="licecap"></a>licecap</h4><p>gif录制软件</p><h4 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h4><p>比较两个文件</p><h4 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h4><p>抓包工具</p><h4 id="XMind-MindNote"><a href="#XMind-MindNote" class="headerlink" title="XMind MindNote"></a>XMind MindNote</h4><p>思维导图 </p><h4 id="starUML"><a href="#starUML" class="headerlink" title="starUML"></a>starUML</h4><p>流程图，时序图</p><h4 id="XMAPP"><a href="#XMAPP" class="headerlink" title="XMAPP"></a>XMAPP</h4><p>建立本地服务器</p><h4 id="foxmail"><a href="#foxmail" class="headerlink" title="foxmail"></a>foxmail</h4><p>邮箱</p><h4 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h4><p>文本编辑器</p><h4 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h4><p>记录</p><h4 id="iTools"><a href="#iTools" class="headerlink" title="iTools"></a>iTools</h4><p>查询手机信息，与Mac屏幕实时共享。</p><h4 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h4><p>Material Theme 主题</p><h4 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h4><p>代码管理</p><h4 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h4><p>快速检索Mac中的程序，资源。</p><h4 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h4><p>http 请求</p><h4 id="翻墙"><a href="#翻墙" class="headerlink" title="翻墙"></a>翻墙</h4><p>ShadowsocksX-NG</p><h4 id="iOS-崩溃解析工具"><a href="#iOS-崩溃解析工具" class="headerlink" title="iOS 崩溃解析工具"></a>iOS 崩溃解析工具</h4><p>dSYMTools</p><h4 id="iOS-切图app-icon-launch"><a href="#iOS-切图app-icon-launch" class="headerlink" title="iOS 切图app icon launch"></a>iOS 切图app icon launch</h4><p>iconizer</p><h4 id="markdown-书写工具"><a href="#markdown-书写工具" class="headerlink" title="markdown 书写工具"></a>markdown 书写工具</h4><p>MWeb Typora</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>XCode-10-升级问题总结</title>
    <link href="/2018/09/29/XCode-10-%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/2018/09/29/XCode-10-%E5%8D%87%E7%BA%A7%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="library-not-found-for-lstdc-6-0-9"><a href="#library-not-found-for-lstdc-6-0-9" class="headerlink" title="library not found for -lstdc++.6.0.9"></a>library not found for -lstdc++.6.0.9</h3><p>xcode 10 中删除了内置 <code>libstdc++.6.0.9.tbd</code>，工程中一些SDK依赖这个库，需要把xcode 9.4 的<code>libstdc++.6.0.9.tbd</code> 添加到xcode中，重启xcode。<br>libstdc++.6.0.9.tbd 的下载地址：<a href="https://github.com/MaricleZhang/libstdc-.6.0.9.tbd.git">libstdc++.6.0.9</a></p><a id="more"></a><h4 id="真机"><a href="#真机" class="headerlink" title="真机"></a>真机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneOS.platform&#x2F;Developer&#x2F;SDKs&#x2F;iPhoneOS.sdk&#x2F;usr&#x2F;lib&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneOS.platform&#x2F;Developer&#x2F;Library&#x2F;CoreSimulator&#x2F;Profiles&#x2F;Runtimes&#x2F;iOS.simruntime&#x2F;Contents&#x2F;Resources&#x2F;RuntimeRoot&#x2F;usr&#x2F;lib&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;Applications&#x2F;Xcode.app&#x2F;Contents&#x2F;Developer&#x2F;Platforms&#x2F;iPhoneSimulator.platform&#x2F;Developer&#x2F;SDKs&#x2F;iPhoneSimulator.sdk&#x2F;usr&#x2F;lib&#x2F;</span><br></pre></td></tr></table></figure><h3 id="Multiple-commands-produce’-Users-user-Library-Developer-Xcode-DerivedData…"><a href="#Multiple-commands-produce’-Users-user-Library-Developer-Xcode-DerivedData…" class="headerlink" title="Multiple commands produce’/Users/user/Library/Developer/Xcode/DerivedData…"></a>Multiple commands produce’/Users/user/Library/Developer/Xcode/DerivedData…</h3><ul><li><p>#####方法1<br>xcode 10 默认是新的编译模式，选择File &gt; Workspace Settings &gt; Build System &gt; Legacy Build System.，改变为之前的编译模式Legacy Build system。</p></li><li><p>#####方法2<br>Open target -&gt; Build phase &gt; Copy Bundle Resource  删除output files 中的脚本，如果存在 info.plist 也一起删除。</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/2403444-dc2bcdb459d1b5d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="delete_output.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS-消息转发机制</title>
    <link href="/2018/06/27/iOS-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <url>/2018/06/27/iOS-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>iOS开发过程中我们经常会碰到这样的报错：unrecognized selector sent to instance ** 原因就是调用一个该对象没有实现的方法。用OC消息机制来说就是：消息的接收者不过到对应的selector，这样就启动了消息转发机制，我们可以通过代码在消息转发的过程中告诉对象应该如何处理未知的消息，默认实现是抛出下面的异常</p></blockquote><a id="more"></a><h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><p>给一个对象发送一条消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[obj messageName:parameter] -&gt; objc_msgSend(obj,SEL, parameter)</span><br></pre></td></tr></table></figure><ol><li>通过 NSObject 的 isa 指针找到对应的 Class</li><li>在 Class 的方法列表中找到对应的 selector</li><li>如果在当前 Class 中未能找到 selector 则往父类的方法列表中继续查找</li><li>如果能找到对应的 selector 则去执行对象的方法实现（IMP）</li><li>如果还是没找到就要开始进入动态方法解析和消息转发</li></ol><p>在上述流程中如果不能找对对应的 selector 时，这时候就会进入消息转发机制。消息转发机制可分为两个阶段，在这两个阶段中，有 3 次机会来处理之前未能处理 selector，越往后所花费的代价将越大，处理的灵活程度也就越高。如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/2403444-746884faa399cef7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="messageforward.png"></p><h3 id="动态特性：方法解析和消息转发"><a href="#动态特性：方法解析和消息转发" class="headerlink" title="动态特性：方法解析和消息转发"></a>动态特性：方法解析和消息转发</h3><h4 id="动态方法解析阶段"><a href="#动态方法解析阶段" class="headerlink" title="动态方法解析阶段"></a>动态方法解析阶段</h4><p>在该阶段中，可以动态的为类添加一个方法，从而让动态添加的方法来处理之前未能处理的消息。可重写类以下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel</span><br></pre></td></tr></table></figure><p>如果是类的静态方法，可重写以下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveClassMethod:(SEL)sel</span><br></pre></td></tr></table></figure><p>SEL 就是未能处理的 selector，返回值为 BOOL 表示是否增加了新的方法来处理该 selector</p><h4 id="备援接收阶段"><a href="#备援接收阶段" class="headerlink" title="备援接收阶段"></a>备援接收阶段</h4><p>在该阶段中我们可以将未知的 selector 转发给其他对象来处理。运行时提供两次机会，来做消息的转发，第一次是重写以下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector</span><br></pre></td></tr></table></figure><h4 id="完整消息转发"><a href="#完整消息转发" class="headerlink" title="完整消息转发"></a>完整消息转发</h4><p>如果不重写该方法，运行时将把方法调用的所有细节封装到 NSInvocation 对象中，进入完整的消息转发机制中，运行时将继续调用一下方法来进行消息的派发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</span><br></pre></td></tr></table></figure><p>方法中的 NSInvocation 参数，包含了所有方法调用的细节，包括 selector/target/参数 等，重写该方法后我们可以将 anInvocation 转发给多个对象来处理该消息。在该阶段我们可以用来实现 “多重继承” 或者多重代理等。</p><p>如果在两个阶段都不做任何处理的话，运行时将会把 selector 交由 doesNotRecognizeSelector 方法来处理，从而抛出异常导致 Crash </p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="崩溃的规避"><a href="#崩溃的规避" class="headerlink" title="崩溃的规避"></a>崩溃的规避</h4><p>创建 <code>NSObject+CashHandle</code>的分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;方法签名</span><br><span class="line">    return [NSMethodSignature signatureWithObjCTypes:&quot;v@:@&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;NSObject+CrashLogHandle---在类:%@中 未实现该方法:%@&quot;,NSStringFromClass([anInvocation.target class]),NSStringFromSelector(anInvocation.selector));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/MaricleZhang/MessageForwardingDemo.git">Demo</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Pod 私有库的创建及使用</title>
    <link href="/2018/02/12/Pod-%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <url>/2018/02/12/Pod-%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CocoaPods是iOS项目的依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，我们一般用的是公有库，代码存放在Github上。个人或公司在开发过程中，会积累很多可以复用的代码包，有些我们不想开源，又想像开源库一样在CocoaPods中管理它们，那么通过私有库来管理就很必要。</p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在创建私有库之前，我们有必要理解私有库的原理，<br><img src="http://upload-images.jianshu.io/upload_images/2403444-9206906d9b8dc9d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="podfile、索引库和代码库关系图.png"></p><p>Podfile:工程的依赖描述文件。<br>Spec:  该仓库存放索引描述文件.podspec，CocoaPods通过该文件对你真正存储代码工程的 Git 仓库进行索引与下载,下面会有对podspec的详细介绍。通过spec库来控制pod私有库的版本。</p><p>Lib : 你上传到远程Git仓库的代码工程，将来用于开源共享或则私有</p><p>CocoaPods 根据podfile中的库的名称，通过spec索引库，来找到真正的代码库。这里有同学可能要问为什么需要两个仓库呢，我的理解是为了快速检索和版本控制。如果没有spec索引库，我们每次pod update的时候都需要在GitHub所有的代码库中检索。显然效率很低。</p><h2 id="Pod私有库的创建步骤"><a href="#Pod私有库的创建步骤" class="headerlink" title="Pod私有库的创建步骤"></a>Pod私有库的创建步骤</h2><ol><li>创建两个仓库：索引库和代码仓库。</li><li>创建并设置本地私有Spec Repo。</li><li>创建Pod所对应的podspec文件。</li><li>本地测试配置好的podspec文件。</li><li>向私有的Spec Repo中提交podspec。</li></ol><h3 id="创建两个仓库：索引库和代码仓库"><a href="#创建两个仓库：索引库和代码仓库" class="headerlink" title="创建两个仓库：索引库和代码仓库"></a>创建两个仓库：索引库和代码仓库</h3><p>在github上创建索引库 <strong><a href="https://github.com/MaricleZhang/ZJMaricleSpec">ZJMaricleSpec</a>**和代码库</strong><a href="https://github.com/MaricleZhang/ZJMaricle">ZJMaricle</a>**</p><h3 id="创建并设置本地私有Spec-Repo"><a href="#创建并设置本地私有Spec-Repo" class="headerlink" title="创建并设置本地私有Spec Repo"></a>创建并设置本地私有Spec Repo</h3><p>两个仓库创建完成后在Terminal中执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> # pod repo add [Private Repo Name] [GitHub HTTPS clone URL]</span><br><span class="line">$ pod repo add ZJMaricleSpec https:&#x2F;&#x2F;github.com&#x2F;MaricleZhang&#x2F;ZJMaricleSpec.git</span><br></pre></td></tr></table></figure><p>需要特别注意的是这里的URL是Spec索引库的地址，如果写成代码库的地址就会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] An unexpected version directory Assets was encountered for the &#x2F;Users&#x2F;zhangjian&#x2F;.cocoapods&#x2F;repos&#x2F;mariclezhang&#x2F;YTVestSDK Pod in the YTVestSDK repository.</span><br></pre></td></tr></table></figure><p>执行完成后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;.cocoapods&#x2F;repos</span><br></pre></td></tr></table></figure><p>如果存在<code>ZJMaricleSpec</code>则说明本地<code>repo Spec</code> 创建成功</p><h3 id="创建Pod所对应的podspec文件"><a href="#创建Pod所对应的podspec文件" class="headerlink" title="创建Pod所对应的podspec文件"></a>创建Pod所对应的podspec文件</h3><p>  cd 到要创建项目的目录然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod lib create ZJMaricle</span><br></pre></td></tr></table></figure><p>然后会问一些问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">What language do you want to use?? [ Swift &#x2F; ObjC ]</span><br><span class="line"> &gt; Objc</span><br><span class="line">&#x2F;&#x2F;这里特别说明一下，最好带上demo方便我们以后的代码调试</span><br><span class="line">Would you like to include a demo application with your library? [ Yes &#x2F; No ]</span><br><span class="line"> &gt; Yes</span><br><span class="line"></span><br><span class="line">Which testing frameworks will you use? [ Specta &#x2F; Kiwi &#x2F; None ]</span><br><span class="line"> &gt; None</span><br><span class="line"></span><br><span class="line">Would you like to do view based testing? [ Yes &#x2F; No ]</span><br><span class="line"> &gt; Yes</span><br><span class="line"></span><br><span class="line">What is your class prefix?</span><br><span class="line"> &gt; ZJ</span><br></pre></td></tr></table></figure><p>问完这4个问题他会自动执行pod install命令创建项目并生成依赖。<br>下面是生成的文件目录及介绍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ tree ZJMaricle -L 2</span><br><span class="line">ZJMaricle</span><br><span class="line">├── Example                                            #demo </span><br><span class="line">│   ├── Podfile                                        #demo 的依赖描述文件</span><br><span class="line">│   ├── Podfile.lock</span><br><span class="line">│   ├── Pods                                           #demo 的依赖文件</span><br><span class="line">│   ├── Tests                                           </span><br><span class="line">│   ├── ZJMaricle</span><br><span class="line">│   ├── ZJMaricle.xcodeproj</span><br><span class="line">│   └── ZJMaricle.xcworkspace</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── ZJMaricle</span><br><span class="line">│   ├── Assets                                         #资源文件</span><br><span class="line">│   └── Classes                                        #类文件</span><br><span class="line">├── ZJMaricle.podspec                                  #podspec pod库的描述文件</span><br><span class="line">└── _Pods.xcodeproj -&gt; Example&#x2F;Pods&#x2F;Pods.xcodeproj</span><br><span class="line"></span><br><span class="line">10 directories, 5 files</span><br></pre></td></tr></table></figure><p>接下来把库文件添加到<code>ZJMaricle/Classes</code>文件夹下，终端进入<code>ZJMaricle/Example</code>下，执行<code>pod update</code>命令,完成后打开项目工程可以看到，刚刚添加的组件已经在Pods子工程下Development Pods/ZJMaricle中了。这里需要注意的是：每次向Pods 中添加文件或者podspec中的版本升级都要执行<code>pod update</code>命令。</p><p>配置podspec文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># Be sure to run &#96;pod lib lint ZJMaricle.podspec&#39; to ensure this is a</span><br><span class="line"># valid spec before submitting.</span><br><span class="line">#</span><br><span class="line"># Any lines starting with a # are optional, but their use is encouraged</span><br><span class="line"># To learn more about a Podspec see http:&#x2F;&#x2F;guides.cocoapods.org&#x2F;syntax&#x2F;podspec.html</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name             &#x3D; &#39;ZJMaricle&#39;                              #名称</span><br><span class="line">  s.version          &#x3D; &#39;0.1.0&#39;                                  #版本号</span><br><span class="line">  s.summary          &#x3D; &#39;description of ZJMaricle.&#39;              #库的描述</span><br><span class="line"></span><br><span class="line"># This description is used to generate tags and improve search results.</span><br><span class="line">#   * Think: What does it do? Why did you write it? What is the focus?</span><br><span class="line">#   * Try to keep it short, snappy and to the point.</span><br><span class="line">#   * Write the description between the DESC delimiters below.</span><br><span class="line">#   * Finally, don&#39;t worry about the indent, CocoaPods strips it!</span><br><span class="line"></span><br><span class="line">  s.description      &#x3D; &lt;&lt;-DESC</span><br><span class="line">TODO: Add long description of the pod here.</span><br><span class="line">                       DESC</span><br><span class="line"></span><br><span class="line">  s.homepage         &#x3D; &#39;https:&#x2F;&#x2F;github.com&#x2F;MaricleZhang&#x2F;ZJMaricle.git&#39; #主页,这里要填写可以访问到的地址，不然验证不通过</span><br><span class="line">  # s.screenshots     &#x3D; &#39;www.example.com&#x2F;screenshots_1&#39;, &#39;www.example.com&#x2F;screenshots_2&#39;</span><br><span class="line">  s.license          &#x3D; &#123; :type &#x3D;&gt; &#39;MIT&#39;, :file &#x3D;&gt; &#39;LICENSE&#39; &#125;</span><br><span class="line">  s.author           &#x3D; &#123; &#39;929006968@qq.com&#39; &#x3D;&gt; &#39;jian.zhang@yuntu-inc.com&#39; &#125;</span><br><span class="line">  s.source           &#x3D; &#123; :git &#x3D;&gt; &#39;https:&#x2F;&#x2F;github.com&#x2F;MaricleZhang&#x2F;ZJMaricle.git&#39;, :tag &#x3D;&gt; s.version.to_s &#125;  #项目地址，这里不支持ssh的地址，验证不通过，只支持HTTP和HTTPS，最好使用HTTPS</span><br><span class="line">  # s.social_media_url &#x3D; &#39;https:&#x2F;&#x2F;twitter.com&#x2F;&lt;TWITTER_USERNAME&gt;&#39;</span><br><span class="line"></span><br><span class="line">  s.ios.deployment_target &#x3D; &#39;8.0&#39;</span><br><span class="line"></span><br><span class="line">  s.source_files &#x3D; &#39;ZJMaricle&#x2F;Classes&#x2F;**&#x2F;*&#39;                        #库文件</span><br><span class="line">  </span><br><span class="line">  # s.resource_bundles &#x3D; &#123;                                         #库资源文件</span><br><span class="line">  #   &#39;ZJMaricle&#39; &#x3D;&gt; [&#39;ZJMaricle&#x2F;Assets&#x2F;*.png&#39;]</span><br><span class="line">  # &#125;</span><br><span class="line"></span><br><span class="line">  # s.public_header_files &#x3D; &#39;Pod&#x2F;Classes&#x2F;**&#x2F;*.h&#39;</span><br><span class="line">  # s.frameworks &#x3D; &#39;UIKit&#39;, &#39;MapKit&#39;</span><br><span class="line">  # s.dependency &#39;AFNetworking&#39;, &#39;~&gt; 2.3&#39;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="本地测试配置好的podspec文件。"><a href="#本地测试配置好的podspec文件。" class="headerlink" title="本地测试配置好的podspec文件。"></a>本地测试配置好的podspec文件。</h3><p>编辑<code>.podspec</code>完成后本地校验是否合格，这里有必要解释一下<code>pod lib lint</code>校验本地<code>.podspec</code>文件和pod库中的文件的合法性，如果不合法，则需要修改再校验，直到校验通过。如果有警告则需要使用<code>pod lib lint --allow-warnings</code>命令通过校验。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod lib lint</span><br></pre></td></tr></table></figure><p>当出现下面情况时说明本地校验成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> -&gt; ZJMaricle (0.1.0)</span><br><span class="line"></span><br><span class="line">ZJMaricle passed validation.</span><br></pre></td></tr></table></figure><p>提交代码，我这里使用的<code>sourcetree</code>,本地代码库与远程库建立连接，这里就不在赘述了。并且给远程仓库打上tag，需要注意的是这里的tag就是创建私有库的版本号，需与 <code>.podspec</code>文件中的版本号保持一致。重要的事情说三遍：本地校验成功后在打tag，本地校验成功后在打tag，本地校验成功后在打tag。<br><img src="http://upload-images.jianshu.io/upload_images/2403444-e403c2147ebdea0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="给GitHub仓库打上tag.png"></p><h3 id="向私有的Spec-Repo中提交podspec"><a href="#向私有的Spec-Repo中提交podspec" class="headerlink" title="向私有的Spec Repo中提交podspec"></a>向私有的Spec Repo中提交podspec</h3><p>确认本地校验成功，并且打上tag后，终端进入到<code>ZJMaricle.podspec</code>同一目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo push ZJMaricleSpec ZJMaricle.podspec  #前面是本地Repo名字 后面是podspec名字</span><br></pre></td></tr></table></figure><p>出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ pod repo push ZJMaricleSpec ZJMaricle.podspec</span><br><span class="line"></span><br><span class="line">Validating spec</span><br><span class="line"> -&gt; ZJMaricle (0.1.0)</span><br><span class="line"></span><br><span class="line">Updating the &#96;ZJMaricleSpec&#39; repo</span><br><span class="line"></span><br><span class="line">Your configuration specifies to merge with the ref &#39;refs&#x2F;heads&#x2F;master&#39;</span><br><span class="line">from the remote, but no such ref was fetched.</span><br><span class="line"></span><br><span class="line">Adding the spec to the &#96;ZJMaricleSpec&#39; repo</span><br><span class="line"></span><br><span class="line"> - [Add] ZJMaricle (0.1.0)</span><br><span class="line"></span><br><span class="line">Pushing the &#96;ZJMaricleSpec&#39; repo</span><br></pre></td></tr></table></figure><p>到索引库Spec Repo远端仓库，会发现有了一次提交，说明podspec已经push上去了，并且索引库已经与代码库建立了有效连接。再到本地的Sepc repo中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;.cocoapods&#x2F;repos&#x2F;ZJMaricleSpec</span><br></pre></td></tr></table></figure><p>会发现目录结构变成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZJMaricle</span><br><span class="line">└── 0.1.0</span><br><span class="line">    └── ZJMaricle.podspec</span><br></pre></td></tr></table></figure><p>到这里pod私有库的创建已经完成，怎么样检验我的pod私有库有没有建立成功呢。执行<code>pod search ZJMaricle</code>出现说明创建成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-&gt; ZJMaricle (0.1.0)</span><br><span class="line">   description of ZJMaricle.</span><br><span class="line">   pod &#39;ZJMaricle&#39;, &#39;~&gt; 0.1.0&#39;</span><br><span class="line">   - Homepage: https:&#x2F;&#x2F;github.com&#x2F;MaricleZhang&#x2F;ZJMaricle.git</span><br><span class="line">   - Source:   https:&#x2F;&#x2F;github.com&#x2F;MaricleZhang&#x2F;ZJMaricle.git</span><br><span class="line">   - Versions: 0.1.0 [ZJMaricleSpec repo]</span><br><span class="line">(END)</span><br></pre></td></tr></table></figure><p>这里讨论的是pod私有库，如果建立共有库的话，请使用 <code>trunk</code>工具,详细请参考<a href="http://guides.cocoapods.org/making/getting-setup-with-trunk.html">官方文档</a>。</p><h2 id="Pod-私有库的使用"><a href="#Pod-私有库的使用" class="headerlink" title="Pod 私有库的使用"></a>Pod 私有库的使用</h2><h3 id="1-私有库的引用"><a href="#1-私有库的引用" class="headerlink" title="1. 私有库的引用"></a>1. 私有库的引用</h3><p>当我们在Example下执行<code>pod install</code> 的时候会出现<code>[!] Unable to find a specification for ZJMaricle </code>,Cocoapods并不能找到对应的私有库。这是因为默认情况下会在公有库<a href="https://github.com/CocoaPods/Specs.git">https://github.com/CocoaPods/Specs.git</a> 中查询，我们的私有库并不在这里，所以当然查询不到。下面是解决的办法，在podfile的顶部添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source &#39;https:&#x2F;&#x2F;github.com&#x2F;CocoaPods&#x2F;Specs.git&#39;  #官方仓库的地址</span><br><span class="line">source &#39;https:&#x2F;&#x2F;github.com&#x2F;MaricleZhang&#x2F;ZJMaricleSpec.git&#39;  #我们自己的私有spec仓库的地址</span><br></pre></td></tr></table></figure><p>这里添加的一定为Spec库的地址，如果写成代码库则会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] An unexpected version directory Assets was encountered for the &#x2F;Users&#x2F;.cocoapods&#x2F;repos&#x2F;mariclezhang&#x2F;ZJMaricleSpec Pod in the ZJMaricleSpec repository.</span><br></pre></td></tr></table></figure><h2 id="2-Pod库的校验"><a href="#2-Pod库的校验" class="headerlink" title="2.Pod库的校验"></a>2.Pod库的校验</h2><h4 id="pod-lib-lint-和-pod-spec-lint-命令的区别"><a href="#pod-lib-lint-和-pod-spec-lint-命令的区别" class="headerlink" title="pod lib lint 和 pod spec lint 命令的区别"></a>pod lib lint 和 pod spec lint 命令的区别</h4><p><code> pod lib lint</code>是只从本地验证你的pod能否通过验证<br> <code>pod spec lint</code>是从本地和远程验证你的pod能否通过验证<br>在提交代码之前打tag之前，使用pod lib lint 验证一般不会出现问题，如果出现问题需要验证远程的代码则使用<code>pod spec lint</code>来验证。<br>本地校验<code>pod lib lint</code>如果出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] ZJMaricle did not pass validation, due to 1 warning (but you can use &#96;--allow-warnings&#96; to ignore it).</span><br></pre></td></tr></table></figure><p>在代码中警告无法清除时，在提提交代码时使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo push ZJMaricle ZJMaricleSpec.podspec --allow-warnings</span><br></pre></td></tr></table></figure><p>参考文档：<br><a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/">使用Cocoapods创建私有podspec</a><br><a href="http://www.jianshu.com/p/1e5927eeb341">Cocoapods使用私有库中遇到的坑</a><br><a href="http://www.cocoachina.com/ios/20150930/13471.html">Cocoapods 应用第二部分-私有库相关</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS常见控件的封装（二）：UIAlertViewController</title>
    <link href="/2016/10/24/iOS%E5%B8%B8%E8%A7%81%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AUIAlertViewController/"/>
    <url>/2016/10/24/iOS%E5%B8%B8%E8%A7%81%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AUIAlertViewController/</url>
    
    <content type="html"><![CDATA[<blockquote><p>UIAlertViewController类在iOS开发中经常使用，但是使用系统方法需要太多的代码，所以我自己封装了一个类。在一个block中实现点击事件。</p></blockquote><a id="more"></a><ul><li>UIAlertController+Category.h</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line"></span><br><span class="line">typedef void (^CallBackBlock)(NSInteger btnIndex);</span><br><span class="line"></span><br><span class="line">@interface UIAlertController (Category)</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 自定义封装的UIAlertController方法</span><br><span class="line"></span><br><span class="line"> @param viewController       显示的vc</span><br><span class="line"> @param alertControllerStyle UIAlertControllerStyle 样式</span><br><span class="line"> @param title                标题</span><br><span class="line"> @param message              提示信息</span><br><span class="line"> @param block                回调block</span><br><span class="line"> @param cancelBtnTitle       取消button标题</span><br><span class="line"> @param destructiveBtnTitle  红色的按钮</span><br><span class="line"> @param otherBtnTitles       其他button标题</span><br><span class="line"> *&#x2F;</span><br><span class="line">+ (void)showAlertCntrollerWithViewController:(UIViewController*)viewController alertControllerStyle:(UIAlertControllerStyle)alertControllerStyle title:(NSString*)title message:(NSString*)message CallBackBlock:(CallBackBlock)block cancelButtonTitle:(NSString *)cancelBtnTitle</span><br><span class="line">                    destructiveButtonTitle:(NSString *)destructiveBtnTitle</span><br><span class="line">                         otherButtonTitles:(NSString *)otherBtnTitles,...NS_REQUIRES_NIL_TERMINATION;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>UIAlertController+Category.h</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;UIAlertController+Category.h&quot;</span><br><span class="line"></span><br><span class="line">@implementation UIAlertController (Category)</span><br><span class="line"></span><br><span class="line">+(void)showAlertCntrollerWithViewController:(UIViewController *)viewController alertControllerStyle:(UIAlertControllerStyle)alertControllerStyle title:(NSString *)title message:(NSString *)message CallBackBlock:(CallBackBlock)block cancelButtonTitle:(NSString *)cancelBtnTitle destructiveButtonTitle:(NSString *)destructiveBtnTitle otherButtonTitles:(NSString *)otherBtnTitles, ...</span><br><span class="line">&#123;</span><br><span class="line">    UIAlertController * alertController &#x3D; [UIAlertController alertControllerWithTitle:title message:message preferredStyle:alertControllerStyle];</span><br><span class="line">    &#x2F;&#x2F;添加按钮</span><br><span class="line">    if (cancelBtnTitle.length) &#123;</span><br><span class="line">        UIAlertAction * cancelAction &#x3D; [UIAlertAction actionWithTitle:cancelBtnTitle style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">            block(0);</span><br><span class="line">        &#125;];</span><br><span class="line">        [alertController addAction:cancelAction];</span><br><span class="line">    &#125;</span><br><span class="line">    if (destructiveBtnTitle.length) &#123;</span><br><span class="line">        UIAlertAction * destructiveAction &#x3D; [UIAlertAction actionWithTitle:destructiveBtnTitle style:UIAlertActionStyleDestructive handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">            block(1);</span><br><span class="line">        &#125;];</span><br><span class="line">        [alertController addAction:destructiveAction];</span><br><span class="line">    &#125;</span><br><span class="line">    if (otherBtnTitles.length) &#123;</span><br><span class="line">        UIAlertAction *otherActions &#x3D; [UIAlertAction actionWithTitle:otherBtnTitles style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) &#123;</span><br><span class="line">            (!cancelBtnTitle.length &amp;&amp; !destructiveBtnTitle.length) ? block(0) : (((cancelBtnTitle.length &amp;&amp; !destructiveBtnTitle.length) || (!cancelBtnTitle.length &amp;&amp; destructiveBtnTitle.length)) ? block(1) : block(2));</span><br><span class="line">        &#125;];</span><br><span class="line">        [alertController addAction:otherActions];</span><br><span class="line">        &#x2F;**</span><br><span class="line">         *  va_list : （1）首先在函数里定义一具VA_LIST型的变量，这个变量是指向参数的指针；</span><br><span class="line">         *            （2）然后用VA_START宏初始化变量刚定义的VA_LIST变量；</span><br><span class="line">         *            （3）然后用VA_ARG返回可变的参数，VA_ARG的第二个参数是你要返回的参数的类型（如果函数有多个可变参数的，依次调用VA_ARG获取各个参数）；</span><br><span class="line">         *            （4）最后用VA_END宏结束可变参数的获取。</span><br><span class="line">         *   va_start :获取可变参数列表的第一个参数的地址;</span><br><span class="line">         *   va_arg :获取当前参数，返回指定类型并将指针指向下一参数</span><br><span class="line">         *   va_end :清空va_list可变参数列表：</span><br><span class="line">         *</span><br><span class="line">         *</span><br><span class="line">         *&#x2F;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args, otherBtnTitles);</span><br><span class="line">        if (otherBtnTitles.length) &#123;</span><br><span class="line">            NSString * otherString;</span><br><span class="line">            int index &#x3D; 2;</span><br><span class="line">            (!cancelBtnTitle.length &amp;&amp; !destructiveBtnTitle.length) ? (index &#x3D; 0) : ((cancelBtnTitle.length &amp;&amp; !destructiveBtnTitle.length) || (!cancelBtnTitle.length &amp;&amp; destructiveBtnTitle.length) ? (index &#x3D; 1) : (index &#x3D; 2));</span><br><span class="line">            while ((otherString &#x3D; va_arg(args, NSString*))) &#123;</span><br><span class="line">                index ++ ;</span><br><span class="line">                UIAlertAction * otherActions &#x3D; [UIAlertAction actionWithTitle:otherString style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) &#123;</span><br><span class="line">                    block(index);</span><br><span class="line">                &#125;];</span><br><span class="line">                [alertController addAction:otherActions];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line">    [viewController presentViewController:alertController animated:YES completion:nil];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>其实主要的难点就是循环获取otherButtons,代码中有详细的介绍，不足之处希望大家指正。想要了解更多或者下载demo,请访问github:<a href="https://github.com/Maricle1/ControlsPackage.git">https://github.com/Maricle1/ControlsPackage.git</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>iOS常见控件的封装（一）：UIButton</title>
    <link href="/2016/10/17/iOS%E5%B8%B8%E8%A7%81%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AUIButton/"/>
    <url>/2016/10/17/iOS%E5%B8%B8%E8%A7%81%E6%8E%A7%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AUIButton/</url>
    
    <content type="html"><![CDATA[<blockquote><p>UIButton类在使用时需要一行行的来设置属性，代码过于冗余。每个点击事件都要创建一个方法，不利于阅读。下面就是我用block封装的UIButton的分类。</p></blockquote><a id="more"></a><ul><li>UIButton+Block.h</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> #import &lt;UIKit&#x2F;UIKit.h&gt;</span><br><span class="line">typedef void(^tapActionBlock)(UIButton *button);</span><br><span class="line"></span><br><span class="line">@interface UIButton (Block)</span><br><span class="line">@property(nonatomic,copy)tapActionBlock actionBlock;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> 通过block对button的点击事件封装</span><br><span class="line"> </span><br><span class="line"> @param frame       frame</span><br><span class="line"> @param title       标题</span><br><span class="line"> @param bgImageName 背景图片</span><br><span class="line"> @param actionBlock 点击事件回调block</span><br><span class="line"> </span><br><span class="line"> @return button</span><br><span class="line"> *&#x2F;</span><br><span class="line">+ (UIButton *)createBtnFrame:(CGRect)frame title:(NSString *)title bgImageName:(NSString *)bgImageName action:(tapActionBlock)actionBlock;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><ul><li>UIButton+Block.m</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;UIButton+Block.h&quot;</span><br><span class="line">#import &lt;objc&#x2F;runtime.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation UIButton (Block)</span><br><span class="line">static NSString *keyOfUseCategoryMethod;&#x2F;&#x2F;用分类方法创建的button，关联对象的key</span><br><span class="line">static NSString *keyOfBlock;</span><br><span class="line"></span><br><span class="line">+ (UIButton *)createBtnFrame:(CGRect)frame title:(NSString *)title bgImageName:(NSString *)bgImageName action:(tapActionBlock)actionBlock</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    UIButton *button &#x3D; [UIButton buttonWithType:UIButtonTypeRoundedRect];</span><br><span class="line">    button.frame &#x3D; frame;</span><br><span class="line">    [button setTitle:title forState:UIControlStateNormal];</span><br><span class="line">    [button setBackgroundImage:[UIImage imageNamed:bgImageName] forState:UIControlStateNormal];</span><br><span class="line">    [button addTarget:button action:@selector(tapAction:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">     *用runtime中的函数通过key关联对象</span><br><span class="line">     *</span><br><span class="line">     *objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)</span><br><span class="line">     *id object                     表示关联者，是一个对象，变量名理所当然也是object</span><br><span class="line">     *const void *key               获取被关联者的索引key</span><br><span class="line">     *id value                      被关联者，这里是一个block</span><br><span class="line">     *objc_AssociationPolicy policy 关联时采用的协议，有assign，retain，copy等协议，一般使用OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><br><span class="line">     </span><br><span class="line">     *&#x2F;</span><br><span class="line">    objc_setAssociatedObject (button , &amp;keyOfUseCategoryMethod , actionBlock, OBJC_ASSOCIATION_COPY_NONATOMIC );</span><br><span class="line">    </span><br><span class="line">    return button;</span><br><span class="line">&#125;</span><br><span class="line">- (void)tapAction:(UIButton*)sender</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 通过key获取被关联对象</span><br><span class="line">     *objc_getAssociatedObject(id object, const void *key)</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    tapActionBlock block &#x3D; ( tapActionBlock )objc_getAssociatedObject (sender , &amp;keyOfUseCategoryMethod );</span><br><span class="line">    </span><br><span class="line">    if (block) &#123;</span><br><span class="line">        </span><br><span class="line">        block(sender);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (void)setActionBlock:(tapActionBlock)actionBlock</span><br><span class="line">&#123;</span><br><span class="line">    objc_setAssociatedObject (self , &amp;keyOfBlock , actionBlock, OBJC_ASSOCIATION_COPY_NONATOMIC );</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (tapActionBlock)actionBlock</span><br><span class="line">&#123;</span><br><span class="line">    return objc_getAssociatedObject (self , &amp;keyOfBlock );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这个封装的主要难点在于用runtime关联block，代码注释中有详细的解释，不足之处希望大家指正。想要了解更多或者下载demo,请访问github:<a href="https://github.com/Maricle1/ControlsPackage.git">https://github.com/Maricle1/ControlsPackage.git</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
